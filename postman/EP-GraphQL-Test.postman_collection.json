{
	"info": {
		"_postman_id": "46124385-45b1-46e9-a005-4ea3bdf94f26",
		"name": "EP-GraphQL-Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "mutations",
			"item": [
				{
					"name": "authenticate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Authentication is successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.authenticate).to.be.an('object');",
									"",
									"    pm.environment.set(\"access_token\", jsonData.data.authenticate.access_token);",
									"});",
									"",
									"postman.setNextRequest(\"authenticateAsCustomerViaPassword\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation authenticate ($client_id: String!) {\n    authenticate (client_id: $client_id) {\n        expires_in\n        expires\n        access_token\n        token_type\n        identifier\n    }\n}",
								"variables": "{\n  \"client_id\": \"{{ELASTICPATH_CLIENT_ID}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "authenticateAsCustomerViaPassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token has customer_id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.authenticateAsCustomerViaPassword).to.be.an('object');",
									"",
									"    pm.expect(jsonData.data.authenticateAsCustomerViaPassword.customer_id).to.equal(pm.environment.get(\"customer_id\"));",
									"",
									"    pm.environment.set(\"x-moltin-customer-token\", jsonData.data.authenticateAsCustomerViaPassword.token);",
									"});",
									"",
									"postman.setNextRequest(\"products\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation authenticateAsCustomerViaPassword ($email: String!, $password: String!) {\n    authenticateAsCustomerViaPassword (email: $email, password: $password) {\n        type\n        id\n        customer_id\n        token\n        expires\n    }\n}",
								"variables": "{\n  \"email\": \"{{customer_email}}\",\n  \"password\": \"{{customer_password}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "addToCart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cart contains \" + pm.environment.get(\"product_name\"), function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.addToCart).to.be.an('array').but.not.an('object');",
									"",
									"    var lineItemFound = false;",
									"    for (var lineItem of jsonData.data.addToCart) {",
									"        if (lineItem.name == pm.environment.get(\"product_name\")) {",
									"            lineItemFound = true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(lineItemFound).to.equal(true);",
									"});",
									"",
									"postman.setNextRequest(\"cart\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addToCart ($cartId: ID!, $productId: ID!, $quantity: Int!) {\n    addToCart (cartId: $cartId, productId: $productId, quantity: $quantity) {\n        id\n        type\n        name\n        description\n        quantity\n        sku\n        value {\n            amount\n            currency\n            includes_tax\n        }\n        unit_price {\n            amount\n            currency\n            includes_tax\n        }\n    }\n}",
								"variables": "{\n  \"productId\": \"{{product_id}}\",\n  \"cartId\": 0,\n  \"quantity\": 1\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "checkoutCart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Checkout is successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.checkoutCart).to.be.an('object').but.not.an('array');",
									"});",
									"",
									"postman.setNextRequest(\"orders\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation checkoutCart ($cartId: ID!, $customer: CustomerInputForCheckout!, $billing: BillingAddressInput!, $shipping: ShippingAddressInput) {\n    checkoutCart (cartId: $cartId, customer: $customer, billing: $billing, shipping: $shipping) {\n        id\n        items {\n            id\n            name\n            product_id\n            quantity\n        }\n        status\n        payment\n        shipping\n    }\n}",
								"variables": "{\n  \"cartId\": 0,\n  \"customer\": {\n    \"name\": \"{{customer_name}}\",\n    \"email\": \"{{customer_email}}\"\n  },\n  \"billing\": {\n    \"first_name\": \"{{customer_first_name}}\",\n    \"last_name\": \"{{customer_last_name}}\",\n    \"company_name\": \"{{$randomCompanyName}}\",\n    \"line_1\": \"{{address_line_1}}\",\n    \"line_2\": \"\",\n    \"city\": \"{{address_county}}\",\n    \"postcode\": \"{{address_postcode}}\",\n    \"county\": \"{{address_county}}\",\n    \"country\": \"{{address_country}}\"\n  },\n  \"shipping\": {\n    \"first_name\": \"{{customer_first_name}}\",\n    \"last_name\": \"{{customer_last_name}}\",\n    \"phone_number\": \"{{$randomPhoneNumber}}\",\n    \"company_name\": \"{{$randomCompanyName}}\",\n    \"line_1\": \"{{address_line_1}}\",\n    \"line_2\": \"\",\n    \"city\": \"{{address_county}}\",\n    \"postcode\": \"{{address_postcode}}\",\n    \"county\": \"{{address_county}}\",\n    \"country\": \"{{address_country}}\",\n    \"instructions\": \"\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "stripeTokenPayment",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation stripeTokenPayment ($orderId: ID!, $token: String!) {\n    stripeTokenPayment (orderId: $orderId, token: $token) {\n        id\n        items {\n            id\n            name\n            product_id\n            quantity\n        }\n        status\n        payment\n        shipping\n    }\n}",
								"variables": "{\n  \"orderId\": 0,\n  \"token\": \"\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "addCustomer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Create customer is successful\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.addCustomer).to.be.an('object').but.not.an('array');",
									"});",
									"",
									"postman.setNextRequest(\"addCustomerAddress\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addCustomer ($customerInput: CustomerInput) {\n    addCustomer (customerInput: $customerInput) {\n        id\n        type\n        name\n        email\n    }\n}",
								"variables": "{\n  \"customerInput\": {\n    \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{customer_password}}\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "addCustomerAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Customer Address First Name is \" + pm.environment.get(\"customer_first_name\"), function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.addCustomerAddress).to.be.an('object');",
									"",
									"    pm.expect(jsonData.data.addCustomerAddress.first_name).to.equal(pm.environment.get(\"customer_first_name\"));",
									"    pm.environment.set(\"address_id\", jsonData.data.addCustomerAddress.id)",
									"});",
									"",
									"postman.setNextRequest(\"customerAddresses\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation addCustomerAddress ($customerId: ID!, $address: CustomerAddressInput) {\n    addCustomerAddress (customerId: $customerId, address: $address) {\n        id\n        type\n        first_name\n        last_name\n        name\n        phone_number\n        instructions\n        company_name\n        line_1\n        line_2\n        city\n        county\n        postcode\n        country\n    }\n}",
								"variables": "{\n  \"customerId\": \"{{customer_id}}\",\n  \"address\": {\n    \"type\": \"address\",\n    \"first_name\": \"{{customer_first_name}}\",\n    \"last_name\": \"{{customer_last_name}}\",\n    \"name\": \"{{address_name}}\",\n    \"phone_number\": \"\",\n    \"instructions\": \"\",\n    \"company_name\": \"\",\n    \"line_1\": \"{{address_line_1}}\",\n    \"line_2\": \"\",\n    \"city\": \"\",\n    \"county\": \"{{address_county}}\",\n    \"postcode\": \"{{address_postcode}}\",\n    \"country\": \"{{address_country}}\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateCustomerAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Customer Address Line 2 is updated with: 'updated' \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.addCustomerAddress).to.be.an('object');",
									"",
									"    pm.expect(jsonData.data.addCustomerAddress.line_2).to.equal(\"updated\");",
									"});",
									"",
									"postman.setNextRequest(\"deleteCustomerAddress\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation updateCustomerAddress ($customerId: ID!, $addressId: ID!, $address: CustomerAddressInput) {\n    updateCustomerAddress (customerId: $customerId, addressId: $addressId, address: $address) {\n        id\n        type\n        first_name\n        last_name\n        name\n        phone_number\n        instructions\n        company_name\n        line_1\n        line_2\n        city\n        county\n        postcode\n        country\n    }\n}",
								"variables": "{\n  \"customerId\": \"{{customer_id}}\",\n  \"address\": {\n    \"id\": \"{{address_id}}\",\n    \"type\": \"address\",\n    \"first_name\": \"{{customer_first_name}}\",\n    \"last_name\": \"{{customer_last_name}}\",\n    \"name\": \"{{address_name}}\",\n    \"phone_number\": \"\",\n    \"instructions\": \"\",\n    \"company_name\": \"\",\n    \"line_1\": \"{{address_line_1}}\",\n    \"line_2\": \"updated\",\n    \"city\": \"\",\n    \"county\": \"{{address_county}}\",\n    \"postcode\": \"{{address_postcode}}\",\n    \"country\": \"{{address_country}}\"\n  },\n  \"addressId\": \"{{address_id}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteCustomerAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Customer Address does not exists \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.deleteCustomerAddress).to.equal(true);",
									"});",
									"",
									"postman.setNextRequest(\"addToCart\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteCustomerAddress ($customerId: ID!, $addressId: ID!) {\n    deleteCustomerAddress (customerId: $customerId, addressId: $addressId)\n}",
								"variables": "{\n  \"customerId\": \"{{customer_id}}\",\n  \"addressId\": \"{{address_id}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "queries",
			"item": [
				{
					"name": "products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response contains \" + pm.environment.get(\"product_name\"), function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.products).to.be.an('array').but.not.an('object');",
									"",
									"    var prodFound = false;",
									"    for (var product of jsonData.data.products) {",
									"        if (product.name == pm.environment.get(\"product_name\")) {",
									"            prodFound = true;",
									"            pm.environment.set(\"product_id\", product.id)",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(prodFound).to.equal(true);",
									"});",
									"",
									"pm.test(\"There are no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).is.undefined;",
									"});",
									"",
									"postman.setNextRequest(\"product\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query products {\n    products {\n        id\n        name\n        slug\n        description\n        status\n        price {\n            amount\n            currency\n            includes_tax\n        }\n        brands {\n            id\n            type\n            name\n            slug\n            description\n            status\n            products {\n                id\n                name\n                slug\n                description\n                status\n                main_image {\n                    file_name\n                    href\n                }\n            }\n        }\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Product is \" + pm.environment.get(\"product_name\"), function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.product).to.be.an('object');",
									"",
									"    pm.expect(jsonData.data.product.name).to.equal(pm.environment.get(\"product_name\"));",
									"});",
									"",
									"pm.test(\"Brands is an array \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.product.brands).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Brands.products is an array \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.product.brands[0].products).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Main image is an object \", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.product.main_image).to.be.an('object');",
									"});",
									"",
									"postman.setNextRequest(\"brands\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query product ($id: ID!) {\n    product (id: $id) {\n        id\n        name\n        slug\n        description\n        status\n        price {\n            amount\n            currency\n            includes_tax\n        }\n        brands {\n            id\n            type\n            name\n            slug\n            description\n            status\n            products {\n                id\n                name\n                slug\n                description\n                status\n                price {\n                    amount\n                    currency\n                    includes_tax\n                }\n                brands {\n                    id\n                    type\n                    name\n                    slug\n                    description\n                    status\n                }\n                main_image {\n                    file_name\n                    href\n                }\n            }\n        }\n        main_image {\n            file_name\n            href\n        }\n    }\n}",
								"variables": "{\n  \"id\": \"{{product_id}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "brands",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response contains \" + pm.environment.get(\"brand_name\"), function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.brands).to.be.an('array').but.not.an('object');",
									"",
									"    var brandFound = false;",
									"    for (var brand of jsonData.data.brands) {",
									"        if (brand.name == pm.environment.get(\"brand_name\")) {",
									"            brandFound = true;",
									"            pm.environment.set(\"brand_id\", brand.id)",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(brandFound).to.equal(true);",
									"});",
									"",
									"postman.setNextRequest(\"brand\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query brands {\n    brands {\n        id\n        type\n        name\n        slug\n        description\n        status\n        products {\n            id\n            name\n            slug\n            description\n            status\n            price {\n                amount\n                currency\n                includes_tax\n            }\n            brands {\n                id\n                type\n                name\n                slug\n                description\n                status\n            }\n            main_image {\n                file_name\n                href\n            }\n        }\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Brand is \" + pm.environment.get(\"brand_name\"), function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.brand).to.be.an('object');",
									"",
									"    pm.expect(jsonData.data.brand.name).to.equal(pm.environment.get(\"brand_name\"));",
									"});",
									"",
									"postman.setNextRequest(\"collections\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query brand ($id: ID!) {\n    brand (id: $id) {\n        id\n        type\n        name\n        slug\n        description\n        status\n        products {\n            id\n            name\n            slug\n            description\n            status\n            price {\n                amount\n                currency\n                includes_tax\n            }\n            brands {\n                id\n                type\n                name\n                slug\n                description\n                status\n                products {\n                    id\n                    name\n                    slug\n                    description\n                    status\n                    main_image {\n                        file_name\n                        href\n                    }\n                }\n            }\n        }\n    }\n}",
								"variables": "{\n  \"id\": \"{{brand_id}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "collections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response contains \" + pm.environment.get(\"collection_name\"), function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.collections).to.be.an('array').but.not.an('object');",
									"",
									"    var collectionFound = false;",
									"    for (var collection of jsonData.data.collections) {",
									"        if (collection.name == pm.environment.get(\"collection_name\")) {",
									"            collectionFound = true;",
									"            pm.environment.set(\"collection_id\", collection.id)",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(collectionFound).to.equal(true);",
									"});",
									"",
									"postman.setNextRequest(\"collection\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query collections {\n    collections {\n        id\n        type\n        status\n        name\n        slug\n        description\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "collection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Collection is \" + pm.environment.get(\"collection_name\"), function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.collection).to.be.an('object');",
									"",
									"    pm.expect(jsonData.data.collection.name).to.equal(pm.environment.get(\"collection_name\"));",
									"});",
									"",
									"postman.setNextRequest(\"categories\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query collection ($id: ID!) {\n    collection (id: $id) {\n        id\n        type\n        status\n        name\n        slug\n        description\n    }\n}",
								"variables": "{\n  \"id\": \"{{collection_id}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response contains \" + pm.environment.get(\"category_name\"), function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.categories).to.be.an('array').but.not.an('object');",
									"",
									"    var categoryFound = false;",
									"    for (var category of jsonData.data.categories) {",
									"        if (category.name == pm.environment.get(\"category_name\")) {",
									"            categoryFound = true;",
									"            pm.environment.set(\"category_id\", category.id)",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(categoryFound).to.equal(true);",
									"});",
									"",
									"postman.setNextRequest(\"category\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query categories {\n    categories {\n        id\n        type\n        status\n        name\n        slug\n        description\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Category is \" + pm.environment.get(\"category_name\"), function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.category).to.be.an('object');",
									"",
									"    pm.expect(jsonData.data.category.name).to.equal(pm.environment.get(\"category_name\"));",
									"});",
									"",
									"postman.setNextRequest(\"customer\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query category ($id: ID!) {\n    category (id: $id) {\n        id\n        type\n        status\n        name\n        slug\n        description\n    }\n}",
								"variables": "{\n  \"id\": \"{{category_id}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cart contains \" + pm.environment.get(\"product_name\"), function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.cart.items).to.be.an('array').but.not.an('object');",
									"",
									"    var lineItemFound = false;",
									"    for (var lineItem of jsonData.data.cart.items) {",
									"        if (lineItem.name == pm.environment.get(\"product_name\")) {",
									"            lineItemFound = true;",
									"            pm.environment.set(\"product_id\", lineItem.id)",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(lineItemFound).to.equal(true);",
									"});",
									"",
									"postman.setNextRequest(\"checkoutCart\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query cart ($id: ID!) {\n    cart (id: $id) {\n        id\n        name\n        description\n        priceWithTax {\n            amount\n            currency\n            formatted\n        }\n        priceWithoutTax {\n            amount\n            currency\n            formatted\n        }\n        tax {\n            amount\n            currency\n            formatted\n        }\n        items {\n            id\n            type\n            name\n            description\n            quantity\n            sku\n            value {\n                amount\n                currency\n                includes_tax\n            }\n            unit_price {\n                amount\n                currency\n                includes_tax\n            }\n        }\n    }\n}",
								"variables": "{\n  \"id\": 0\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Orders is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.orders).to.be.an('array').but.not.an('object');",
									"    pm.expect(jsonData.data.orders.length).to.be.greaterThan(1)",
									"",
									"    pm.environment.set(\"order_id\", jsonData.data.orders[0].id);",
									"});",
									"",
									"postman.setNextRequest(\"hierarchies\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query orders {\n    orders {\n            id\n            type\n            status\n            payment\n            shipping\n            shipping_address{\n                first_name\n                last_name\n                country\n                postcode\n            }\n            customer{\n                name\n                email\n            }\n            billing_address{\n                first_name\n                last_name\n                country\n                postcode\n            }\n            meta{\n                timestamps{\n                    created_at\n                    updated_at\n                }\n                display_price{\n                    with_tax{\n                        amount\n                        currency\n                        formatted\n                    }\n                    without_tax{\n                        amount\n                        currency\n                        formatted\n                    }\n                }\n            }\n            relationships{\n                customer {\n                        data\n                        {\n                            id\n                            type\n                        }\n                }\n                items{\n                    data{\n                        id\n                        type\n                    }\n                }\n        }\n    }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Orders is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.orders).to.be.an('array').but.not.an('object');",
									"    pm.expect(jsonData.data.orders.length).to.be.greaterThan(1)",
									"",
									"    pm.environment.set(\"order_id\", \"jsonData.data.orders[0].id\");",
									"});",
									"",
									"postman.setNextRequest(\"hierarchies\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query order ($id: ID!) {\n    order (id: $id) {\n        id\n        items {\n            id\n            name\n            product_id\n            quantity\n        }\n        status\n        payment\n        shipping\n    }\n}",
								"variables": "{\n  \"id\": \"{{order_id}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Customer is \" + pm.environment.get(\"customer_name\"), function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.customer).to.be.an('object');",
									"",
									"    pm.expect(jsonData.data.customer.name).to.equal(pm.environment.get(\"customer_name\"));",
									"});",
									"",
									"postman.setNextRequest(\"addCustomer\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query customer ($id: ID!) {\n    customer (id: $id) {\n        id\n        type\n        name\n        email\n    }\n}",
								"variables": "{\n  \"id\": \"{{customer_id}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "customerAddresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response contains \" + pm.environment.get(\"customer_first_name\"), function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.customerAddresses).to.be.an('array').but.not.an('object');",
									"",
									"    var addressFound = false;",
									"    for (var address of jsonData.data.customerAddresses) {",
									"        if (address.first_name == pm.environment.get(\"customer_first_name\")) {",
									"            addressFound = true;",
									"            break;",
									"        }",
									"    }",
									"    pm.expect(addressFound).to.equal(true);",
									"});",
									"",
									"postman.setNextRequest(\"customerAddress\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query customerAddresses ($customerId: String!) {\n    customerAddresses (customerId: $customerId) {\n        id\n        type\n        first_name\n        last_name\n        name\n        phone_number\n        instructions\n        company_name\n        line_1\n        line_2\n        city\n        county\n        postcode\n        country\n    }\n}",
								"variables": "{\n  \"customerId\": \"{{customer_id}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "customerAddress",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Customer Address is \" + pm.environment.get(\"customer_first_name\"), function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.customerAddress).to.be.an('object');",
									"",
									"    pm.expect(jsonData.data.customerAddress.first_name).to.equal(pm.environment.get(\"customer_first_name\"));",
									"});",
									"",
									"postman.setNextRequest(\"deleteCustomerAddress\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query customerAddress ($customerId: String!, $addressId: String!) {\n    customerAddress (customerId: $customerId, addressId: $addressId) {\n        id\n        type\n        first_name\n        last_name\n        name\n        phone_number\n        instructions\n        company_name\n        line_1\n        line_2\n        city\n        county\n        postcode\n        country\n    }\n}",
								"variables": "{\n  \"customerId\": \"{{customer_id}}\",\n  \"addressId\": \"{{address_id}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "hierarchies",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get All Hierarchies\", function () {",
									"    var jsonData = pm.response.json()",
									"    var hierarchies = jsonData.data.hierarchies",
									"",
									"    pm.expect(hierarchies).to.be.an('array').but.not.an('object')",
									"    pm.expect(hierarchies).length.to.be.at.least(1)",
									"",
									"    for (var hierarchy of hierarchies) {",
									"        pm.expect(hierarchy).to.be.an('object')",
									"        pm.expect(hierarchy).to.have.all.keys('id', 'type', 'attributes')",
									"        pm.expect(hierarchy.id).to.be.a('string')",
									"        pm.expect(hierarchy.type).to.be.a('string').and.equals(\"hierarchy\")",
									"        pm.expect(hierarchy.attributes).to.be.an('object').and.to.have.all.keys('name', 'slug', 'description')",
									"    }",
									"",
									"    // Set the first hierarchy's id in env for next test about \"hierarchy\"",
									"    pm.environment.set(\"hierarchy_id\", hierarchies[0].id)",
									"});",
									"",
									"postman.setNextRequest(\"hierarchy\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query hierarchies {\n  hierarchies {\n    id\n    type\n    attributes {\n      name\n      slug\n      description\n    }\n  }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "hierarchy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get a hierarchy\", function () {",
									"    var jsonData = pm.response.json()",
									"    var hierarchy = jsonData.data.hierarchy",
									"",
									"    pm.expect(hierarchy).to.be.an('object')",
									"    pm.expect(hierarchy).to.have.all.keys('id', 'type', 'attributes')",
									"    pm.expect(hierarchy.id).to.be.a('string')",
									"    pm.expect(hierarchy.type).to.be.a('string').and.equals(\"hierarchy\")",
									"    pm.expect(hierarchy.attributes).to.be.an('object').and.to.have.all.keys('name', 'slug', 'description')",
									"",
									"});",
									"",
									"postman.setNextRequest(\"nodes\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query hierarchy ($id: ID!) {\n  hierarchy (id: $id) {\n    id\n    type\n    attributes {\n      name\n      slug\n      description\n    }\n  }\n}",
								"variables": "{\n  \"id\": \"{{hierarchy_id}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "nodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get All Nodes\", function () {",
									"    var jsonData = pm.response.json()",
									"    var nodes = jsonData.data.nodes",
									"",
									"    pm.expect(nodes).to.be.an('array').but.not.an('object')",
									"    pm.expect(nodes).length.to.be.at.least(1)",
									"",
									"    for (var node of nodes) {",
									"        pm.expect(node).to.be.an('object')",
									"        pm.expect(node).to.have.all.keys('id', 'type', 'attributes')",
									"        pm.expect(node.id).to.be.a('string')",
									"        pm.expect(node.type).to.be.a('string').and.equals(\"node\")",
									"        pm.expect(node.attributes).to.be.an('object').and.to.have.all.keys('name', 'slug', 'description')",
									"    }",
									"",
									"    // Set the first node's id in env for next test",
									"    pm.environment.set(\"node_id\", nodes[0].id)",
									"});",
									"",
									"postman.setNextRequest(\"node\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query nodes {\n  nodes {\n    id\n    type\n    attributes {\n      name\n      description\n      slug\n    }\n  }\n}",
								"variables": "{}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "node",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get A Node\", function () {",
									"    var jsonData = pm.response.json()",
									"    var node = jsonData.data.node",
									"",
									"    pm.expect(node).to.be.an('object')",
									"    pm.expect(node).to.have.all.keys('id', 'type', 'attributes')",
									"    pm.expect(node.id).to.be.a('string')",
									"    pm.expect(node.type).to.be.a('string').and.equals(\"node\")",
									"    pm.expect(node.attributes).to.be.an('object').and.to.have.all.keys('name', 'slug', 'description')",
									"});",
									"",
									"postman.setNextRequest(\"nodeChildren\");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query node ($id: ID!) {\n  node (id: $id) {\n    id\n    type\n    attributes {\n      name\n      description\n      slug\n    }\n  }\n}",
								"variables": "{\n  \"id\": \"{{node_id}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "nodeChildren",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Get Node Children\", function () {",
									"    var jsonData = pm.response.json()",
									"    var nodeChildren = jsonData.data.nodeChildren",
									"",
									"    pm.expect(nodeChildren).to.be.an('array').but.not.an('object')",
									"",
									"    if (nodeChildren > 0) {",
									"        for (var node of nodeChildren) {",
									"            pm.expect(node).to.be.an('object')",
									"            pm.expect(node).to.have.all.keys('id', 'type', 'attributes')",
									"            pm.expect(node.id).to.be.a('string')",
									"            pm.expect(node.type).to.be.a('string').and.equals(\"node\")",
									"            pm.expect(node.attributes).to.be.an('object').and.to.have.all.keys('name', 'slug', 'description')",
									"        }",
									"    }",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query nodeChildren ($id: ID!) {\n  nodeChildren (id: $id) {\n    id\n    type\n    attributes {\n      name\n      description\n      slug\n    }\n  }\n}",
								"variables": "{\n  \"id\": \"{{node_id}}\"\n}"
							}
						},
						"url": {
							"raw": "{{url}}",
							"host": [
								"{{url}}"
							]
						}
					},
					"response": []
				}
			],
			"auth": {
				"type": "bearer",
				"bearer": [
					{
						"key": "token",
						"value": "{{access_token}}",
						"type": "string"
					}
				]
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.request.headers.add({",
					"  key: \"X-Moltin-Customer-Token\",",
					"  value: \"{{x-moltin-customer-token}}\"",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "7dd5bd07-0b8a-4b6f-a812-4af16748d886",
			"key": "url",
			"value": ""
		}
	]
}